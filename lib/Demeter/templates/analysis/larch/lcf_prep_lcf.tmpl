{
  # here $S is the LCF group
  @list = $S->standards_list;
  $string = q{'} . $list[0] . q{',};
  $mix = join('.', $S->group, shift(@list));
  foreach my $stan (@list) {
    $mix .= ' + ' . join('.', $S->group, $stan);
    $string .= q{'} . $stan . q{',};
  };
  chop $string;
  q{};
}

for g in ({$string}):
    ## amplitude/e0 parameters, bkg_eshift for this standard
    __a  = getattr(demlcf,   g+'_a')
    __e  = getattr(demlcf,   g+'_e')
    __sh = getattr(demlcfsh, g)
    __grid = getattr({$S->group}, 'x')
    if '{$S->space}' == 'chi':
        __kgri = getattr(_main.get_group(g), 'k')
        __data = getattr(_main.get_group(g), 'chi')
	## the k-grids are not guaranteed to be of the same length (may be off by one or a few)
        __new  = __a * interp(__kgri, __data*__kgri**{$P->kweight}, __grid, fill_value=0.0)
    else:
        ## arrays for interpolation
        __ener = getattr(_main.get_group(g), 'energy')
        __data = getattr(_main.get_group(g), '{$S->suffix}')
        ## this standard, weighted, interpolated onto data grid
        __new  = __a * interp(__ener+__e+__sh, __data, __grid, fill_value=0.0)
    endif
    __part = array(__new)
    setattr({$S->group}, g, __part)
endfor

if '{$S->space}' == 'chi':
   {$S->group}.line = zeros(len({$S->group}.x))
else:
   {$S->group}.line = demlcf._slope * {$S->group}.x + demlcf._offset
   {$S->group}.line[:demlcfconst.i0] = 0
endif

{$S->group}.lcf = {$mix} + {$S->group}.line
{$S->group}.resid = {$S->group}.lcf - {$S->group}.func

show {$S->group}

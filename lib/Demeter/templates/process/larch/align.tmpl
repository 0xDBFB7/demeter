{ # -*- ifm -*-
  # data alignment template
  #   {$D} returns the ifeffit group name
  #   {$D->get("parameter")} returns the value of that parameter
  #   {$DS} returns the ifeffit group name for the data standard
  #   {$DS->get("parameter")} returns the value of that parameter for the
  #         data standard
  #
  # need to allow for fitting smoothed data to standard
  # --->  larch access to stats on esh parameter: aa__.esh.stderr  aa__.esh.correl
  $emin = $DS->bkg_e0 - 20;
  $emax = $DS->bkg_e0 + 50;

  $s = $C->default("smooth", "sg_size");
  $s += 1 if not $s%2;
  $o = $C->default("smooth", "sg_order");
  $o = $s - 1 if $o >= $s;

  q()
}
##| auto-aligning {$D->group} to {$DS->group}
aa__ = group(esh     = param({$DS->bkg_e0 - $D->bkg_e0}, vary = True),
             scale   = param(1, vary = True),
             __name__='aa__')


aa__data = group(x={$D->group}.energy, y={$D->group}.xmu, 
                 i1 = index_of({$DS->group}.energy+{$DS->bkg_eshift}, {$emin}),
                 i2 = index_of({$DS->group}.energy+{$DS->bkg_eshift}, {$emax}),
                 __name__='aa__data')
aa__stan = group(x={$DS->group}.energy+{$DS->bkg_eshift}, y={$DS->group}.xmu, __name__='aa__stan')

def alignment(par, da, st):
    xmui = interp(da.x+par.esh, da.y, st.x, fill_value=0.0)
    
    if {$P->e_smooth}:
       resid = savitzky_golay(deriv(st.y)/deriv(st.x), window_size={$s}, order={$o}) - par.scale*savitzky_golay((deriv(xmui)/deriv(da.x)), window_size={$s}, order={$o})
    else:
       resid = deriv(st.y)/deriv(st.x) - par.scale*(deriv(xmui)/deriv(da.x))
    endif
    return resid[da.i1:da.i2]
enddef

minimize(alignment, aa__, args=(aa__data, aa__stan))
_sys.paramGroup = None

##print fit_report(aa__)

del aa__data, aa__stan
<<nl>>

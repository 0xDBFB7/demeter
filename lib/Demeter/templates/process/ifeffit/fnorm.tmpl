{ # -*- ifm -*-
  # pre-edge template
  #   {$D->group} returns the ifeffit group name
  #   {$D->parameter} returns the value of that parameter
  q{}
}
## functional normalization of chi(k) for {$D->group}
set {$D->group}.pst = norm_c0 + norm_c1*({$D->group}.energy+{$D->bkg_eshift}) + norm_c2*({$D->group}.energy+{$D->bkg_eshift})**2
set {$D->group}.fn = {$D->group}.pst - {$D->group}.pre_edge
set n = nofx({$D->group}.energy, {$D->bkg_e0}+{$D->bkg_eshift})

set {$D->group}.fn1 = ones(n-1)
set {$D->group}.fn2 = slice({$D->group}.fn, n, npts({$D->group}.energy))
set fnmax = ceil({$D->group}.fn2)
set {$D->group}.fn2 = {$D->group}.fn2/fnmax
set {$D->group}.fn = join({$D->group}.fn1, {$D->group}.fn2)

set {$D->group}.fun = {$D->group}.xmu / {$D->group}.fn

pre_edge("{$D->group}.energy+{$D->bkg_eshift}", {$D->group}.fun, e0={$D->bkg_e0},
         pre1={$D->bkg_pre1}, pre2={$D->bkg_pre2}, norm_order={$D->bkg_nnorm},
	 norm1={$D->bkg_nor1}, norm2={$D->bkg_nor2}{$fixed})
spline("{$D->group}.energy+{$D->bkg_eshift}", {$D->group}.fun, e0={$D->bkg_e0}, rbkg={$D->bkg_rbkg},
       {($D->bkg_stan !~ /None/) ? sprintf("k_std=%s.k, chi_std=%s.chi, ", $D->bkg_stan, $D->bkg_stan) : q{}}
       {($D->bkg_fixstep) ? sprintf("edge_step=%.7g, find_step=0, ", $D->bkg_step) : q{} }
       kmin={$D->bkg_spl1}, kmax={$D->bkg_spl2}, kweight={$D->bkg_kw}, dk={$D->bkg_dk},
       kwindow={$win}, pre1={$D->bkg_pre1}, pre2={$D->bkg_pre2},
       norm_order={$D->bkg_nnorm}, norm1={$D->bkg_nor1}, norm2={$D->bkg_nor2}, 
       clamp1={$D->bkg_clamp1}, clamp2={$D->bkg_clamp2}, nclamp=5, interp=quad)

erase {$D->group}.pst, {$D->group}.fn, {$D->group}.fn1, {$D->group}.fn2

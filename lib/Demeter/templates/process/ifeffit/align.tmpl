{ # -*- ifm -*-
  # data alignment template
  #   {$D} returns the ifeffit group name
  #   {$D->get("parameter")} returns the value of that parameter
  #   {$DS} returns the ifeffit group name for the data standard
  #   {$DS->get("parameter")} returns the value of that parameter for the
  #         data standard
  #   {$P->get("interp")} gives the type of interpolation to do
  #
  # need to allow for fitting smoothed data to standard
}
{
  $emin = $DS->bkg_e0 -  50;
  $emax = $DS->bkg_e0 + 100;
  $start = 'smooth(' x $P->e_smooth;
  $end = ')' x $P->e_smooth;
  q()
}
##| auto-aligning {$D->group} to {$DS->group}
guess(aa___esh   = 0,
      aa___scale = 1)
def {$D->group}.xmui    = {$P->interp}({$D->group}.energy+aa___esh, {$D->group}.xmu, {$DS->group}.energy+{$DS->bkg_eshift})
def aa___.res    = {$start}deriv({$DS->group}.xmu)/deriv({$DS->group}.energy){$end} - aa___scale*{$start}deriv({$D->group}.xmui)/deriv({$D->group}.energy){$end}
minimize(aa___.res, x={$DS->group}.energy, xmin={$emin}, xmax={$emax})
set(aa___.res    = aa___.res,
    {$D->group}.xmui    = {$D->group}.xmui)
unguess
erase aa___scale aa___.res {$D->group}.xmui
<<nl>>

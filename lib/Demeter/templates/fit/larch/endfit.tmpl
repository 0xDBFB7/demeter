{ # -*- ifm -*-
  # feffit command template
  #   {$D->group} returns the ifeffit group name
  #   {$D->parameter} returns the value of that parameter
  #   {$F->parameter} returns the value for the current Fit
}
{
  $kstring   = q{};
  $kstring  .= "2," if $D->fit_k2;
  $kstring  .= "1," if $D->fit_k1;
  $kstring  .= "3," if $D->fit_k3;
  $kstring  .= sprintf("%.3f,", $D->fit_karb_value) if $D->fit_karb;
  $kstring ||= "kweight=1,";
  $kstring   = '[' . $kstring . ']';
  $epsstring = q{};
  $epsstring = " epsilon_k = " . $D->fit_epsilon . ", " if ($D->fit_epsilon > 0);
  q{}
}
###__ perform the fit
del {$D->group}.epsilon_k, {$D->group}.epsilon_r
trans_{$D->group} = feffit_transform(kmin={$D->fft_kmin}, kmax={$D->fft_kmax}, kw={$kstring}, dk={$D->fft_dk}, window='{$D->fft_kwindow}',
                               rmin={$D->bft_rmin}, rmax={$D->bft_rmax})
dset_{$D->group} = feffit_dataset(data={$D->group},{$epsstring}
                            pathlist=[{$F->indeces}],
                            transform=trans_{$D->group})
dsets.append(dset_{$D->group})
{$F->group} = feffit(gds, dsets)

##| fit group for {$D->group}
{$D->group}_fit     = group()
{$D->group}_fit.k   = {$D->group}.k
{$D->group}_fit.chi = dset_{$D->group}.model.chi

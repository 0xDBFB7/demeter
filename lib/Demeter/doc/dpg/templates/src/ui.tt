[% META title = 'User interfaces'
        about = ''
	chapter = 1
	nosubpages = 1
%]


[% FILTER html_para %]
Most of [% demeter %] makes no particular assumptions about how you
will be interacting with it.  There is no special exception handling
beyond what comes normally with perl.  In the case of, for instance,
failed sanity checks on a fitting model, error messages are sent to 
perl's normal [% INCLUDE font/mono a='warn' %] and
[% INCLUDE font/mono a='die' %] channels on STDERR.  The only 
sense in which there is an 
[% INCLUDE font/quote a="application interface" %] is due to the fact
that [% demeter %] uses Moose, so one interacts with [% demeter %] in
essentially the way one would interact with a class system written in
Moose.  Any special functionality for a particular style of user
interface is something that needs to be explicitly enabled in your 
[% demeter %]-using program.
[% END %]

[% PROCESS section label="Command line interface" %]

[% FILTER html_para %]
[% demeter %] has a lot of neat features that get enabled when you
explicitly set the [% INCLUDE font/mono a='ui' %] attibute of the Mode
object to be [% INCLUDE font/mono a='screen' %].  The best way to do
this is at the very beginning of your program, when you import 
[% demeter %].
[% END %]

[% WRAPPER codeexample -%]
#!/usr/bin/perl
use Demeter qw(:ui=screen);
[% END %]

[% FILTER html_para %]
Setting the [% INCLUDE font/mono a='ui' %]
[% INCLUDE font/quote a="pragma" %] in this way makes [% demeter %]
assume at compile time that you program will be using a command line
UI.  Doing so at this stage will enable the full compliment of rich
CLI features.

You can also switch to screen mode during the course of your program,
like so.
[% END %]

[% WRAPPER codesample -%]
$any_object -> mo -> ui('screen');
[% END %]

[% FILTER html_para %]
However, setting screen mode this way cannot enable all the features.

The features that get turned on by screen mode include:
[% END %]

[% WRAPPER html/list type="dl" %]
[% WRAPPER html/dt dt="Spinner" %]
A spinner feature will be displayed during time consuming operations.
This takes the form of a sort of pulsing thing on the cursor line in
the terminal window.  The time consuming operations include
fitting, deserializing a fit, running the pathfinder, and building a
histogram.  In screen mode, your objects will have a
[% INCLUDE font/mono a='thingy' %] attribute which is set to an
anonymous array containing the frames of the spinner.  You can change
the spinner by changing that attribute.  Term::Twiddle
is used to make the spinner.
[% END %]
[% WRAPPER html/dt dt="Colored feedack" %]
Feedback from the executions of [% feff %] and [% ifeffit %] will be
highlighted using Term::ANSIColor.  This is mostly used to draw
attention to warning and error messages as well as certain kinds of
status messages.
[% END %]
[% WRAPPER html/dt dt="Colored exception handling"  %]
Errors and problems that result in a call to 
[% INCLUDE font/mono a='warn' %] or
[% INCLUDE font/mono a='die' %] will get a bit of collor coding
(yellow and red text respectively.  These will also return complete
stack traces to help debugging efforts.
[% END %]
[% WRAPPER html/dt dt="Fit interview"  %]
You have access to the fit interview, which provides a bit of keyboard
driven interaction for plotting, examining parameter values, reading
and log files.  You can think of this as a poor man's [% artemis %].
Just do
[% WRAPPER codesample -%]
$fit_object -> interview;
[% END %]
after a fit.
[% END %]
[% WRAPPER html/dt dt="Pause"  %]
You have a simple way of pausing the flow of your script and
displaying a prompt.
[% WRAPPER codesample -%]
$any_object -> pause;
[% END %]
This will pause the flow of your program and print
[% INCLUDE font/mono a='Hit return to continue> ' %] in underlined
text.  You can specify the text by doing:
[% WRAPPER codesample -%]
$any_object -> pause("Try to jump up and down three times before the fit finishes...");
[% END %]
This is particularly useful when using the gnuplot plotting backend.
Gnuplot's normal behavior is to close at the end of the script.  Using
the pause allows you time to examine a plot before ending your program.
[% END %]
[% END %]


[% PROCESS section label="Graphical interface" %]

[% FILTER html_para %]
Describing GUIs is well beyond the scope of this document.  
[% demeter %] can be used with just about any interface toolkit.
GUIs for [% artemis %], [% atoms %], and [% hephaestus %] 
using wxWindows come with the [% demeter %] package and there is
substantial functionality for Wx that has been baked into those parts
of [% demeter %].  But there is nothing that explicitly ties anything
described in this document to Wx.
[% END %]

[% PROCESS section label="Web interface" %]

[% WRAPPER html/todo %]
Expose some fraction (possibly all...) of [%demeter %] via XML-RPC.
[% END %]

[% PROCESS section label="Plotting backends" %]

[% WRAPPER html/list type="ul" %]
[% WRAPPER html/li %]
pgplot
[% END %]
[% WRAPPER html/li %]
gnuplot
[% END %]
[% WRAPPER html/li %]
singlefile, not really a display backend, more of an export tool for
using some other program to make beautiful, publication-quality plots
[% END %]
[% END %]

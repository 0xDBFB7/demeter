[% META title = 'Mode object' %]

[% FILTER html_para %]
The Mode object is a singleton created automatically when an instance
of a [% demeter %] program is started.  The Mode object is the thing
that keeps track of the state of everything in a [% demeter %]
program.  For example, attributes of the mode are used to set the 
[% INCLUDE html/link text="disposal channel" link="dispose.html#commanddisposal" %] and the
[% INCLUDE html/link text="template set" link="dispose.html#templatesets" %].

To make the Mode object readily accessible at all times in your
program, the [% INCLUDE font/mono a="mo" %] method is a method of the
base class and is inherited by all [% demeter %] objects.  Thus, given
any object, you can [% INCLUDE font/quote a="find" %] the Mode object
like so:
[% END %]

[% WRAPPER codesample -%]
$the_mode_object = $any_object -> mo;
[% END %]

[% FILTER html_para %]
To choose disposal channels, use the [% INCLUDE font/mono a="set_mode" %]
method.  For instance, to direct output to both [% ifeffit %] and to
the screen (which is useful for debugging purposes)
[% END %]

[% WRAPPER codesample -%]
$any_object -> set_mode(ifeffit=>1, screen=>1);
[% END %]

[% FILTER html_para %]
To then turn off screen output:
[% END %]

[% WRAPPER codesample -%]
$any_object -> set_mode(screen=>0);
[% END %]

[% FILTER html_para %]
The Mode object does a lot more that.  It keeps count of the number of
data sets used in a fitting model so that [% ifeffit %]'s 
[% INCLUDE font/mono a="feffit" %] command works properly for a
multiple data set fit.  It keeps track of the number of fits that have
been run in the current instance of the [% demeter %] program.  And it
keeps track of the indexing of Path objects.  It also keeps track of
the directory in which the [% demeter %] program started and of the
current working directory as the program proceeds.  For a full list of
the atttributes, see the documentation for the 
[% INCLUDE font/module a="Demeter::Mode" %] object.

Other attributes keep track of every object created during
and instance of [% demeter %]: 
[% END %]

[% WRAPPER codesample -%]
my @all_atoms  = @{ $any_object->mo->Atoms };
my @all_data   = @{ $any_object->mo->Data };
my @all_feff   = @{ $any_object->mo->Feff };
my @all_fit    = @{ $any_object->mo->Fit };
my @all_gds    = @{ $any_object->mo->GDS };
my @all_path   = @{ $any_object->mo->Path };
my @all_plot   = @{ $any_object->mo->Plot };
##  ... and so on ... one for each kind of object
[% END %]

[% FILTER html_para %]
The accessor returns an array reference.  The 
[% INCLUDE font/mono a="\@{ }" %] syntax dereferences the array.
References in perl are explained in detail in the
[% INCLUDE html/link text="perlref document"
                     link="http://perldoc.perl.org/perlref.html" %].

The [% INCLUDE font/mono a="everything" %] method returns references
to every object created during the instance of the [% demeter %]
program.
[% END %]

[% WRAPPER codesample -%]
my @all_of_them = $any_object->mo->everything;
[% END %]

[% FILTER html_para %]
The [% INCLUDE font/mono a="fetch" %] method can be used to find a
particular object given the value of its 
[% INCLUDE font/mono a="group" %] attribute, which is a randmoly
generated string that gets made when the object is created.  This is
most useful when deserializing a save file.  This example finds a Data
object:
[% END %]

[% WRAPPER codesample -%]
my $object = $any_object->mo->fetch("Data", $group_name);
[% END %]

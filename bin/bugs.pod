## This pod document is for Demeter version 0.9.25.

=head1 NAME

Reporting bugs in Demeter

=head1 VERSION

This documentation refers to Demeter version 0.9.25.

=head1 OVERVIEW

All software has bugs.  I<This> software certainly has bugs.  This
document explains how to report problems with the software
effectively.  In this context "effectively" means in a manner such
that Bruce is likely to understand the problem and, therefore, likely
to fix it promptly.

=head2 The basic rules to good bug reporting

=over 4

=item *

Use the L<Ifeffit mailing list|http://millenia.cars.aps.anl.gov/mailman/listinfo/ifeffit>.
The mailing list is always the appropriate place to report problems
with the software.

=item *

Provide enough information that your problem can be reproduced by
someone else.  That may mean providing the data or project file that
triggers the problem.  That may mean explaining step-by-step how to
arrive at the problem.  That may mean taking a screenshot to
demonstrate the appearance of the problem.  In any case, be explicit.

=back

There are good reasons to use the mailing list:

=over 4

=item *

Bruce, Demeter's author, reads and responds to questions on the
mailing list.  So do many other people, any whom may be able to help
you with your problem.

=item *

The problem and -- hopefully -- it's solution will be archived.  That
means that someone else having the same problem might find that
solution.

=back

The corollaries to those two rules are

=over 4

=item *

Don't send email directly to Bruce.

=item *

Don't be vague.

=back

If you send mail directly to Bruce, the likely response will be to ask
you to use the mailing list.  If you are vague, the likely response
will be to ask you for more information.  If you send vague mail
directly to Bruce, you may be ignored outright.

=head2 Capturing error messages from Demeter programs

When Demeter runs into a problem, it usually emits error messages that
are useful for understanding the cause of the bug.  Even when Athena
or Artemis crashes hard, some useful information is usually provided.

A good bug report will include this information.  Don't edit this
information, regardless of how cryptic or repetitive it may seem.

=over 4

=item B<Windows>

Each of the GUI programs (Athena, Artemis, and Hephaestus) writes its
output messages to a log file.  This log file is in the
C<%APPDATA%\demeter> folder.  On Windows 7, C<%APPDATA%> is typically

  C:\Users\<username>\AppData\Roaming\

where C<E<lt>usernameE<gt>> is I<your> login name.  For me, this ends up being C<C:\Users\bravel\AppData\Roaming\>.
On Windows XP and Vista, C<%APPDATA%> is typically

  C:\Documents and Settings\<username>\Application Data\

This folder may normally be L<hidden from
view|http://www.blogtechnika.com/how-to-hide-files-and-folders-and-access-them-in-windows-7>.

Each program writes its own log file.  Athena's log file is
C<%APPDATA%\demeter\dathena.log> and so on.

This log file should be included in any bug report.

Please note that this log file is overwritten I<every> time you fire
up the associated program.  When reporting a bug, be sure to use the
log file you find I<immediately> after acountering your problem and
before you relaunch the program.

=item B<Linux or other Unix systems>

On Linux and other Unixes, the GUI programs do not record log files as
described above.  Top capture the error message, you should start the
program from the command line.  Athena is started by typing the
command C<dathena>, Artemis by typing C<dartemis> and so on.  When the
bug is encountered, the error messages will be written to the screen.
These can be copied and pasted into an email message.

Alternatively, you can use the
L<tee|http://www.gnu.org/software/coreutils/manual/coreutils.html#tee-invocation>
program to record the error messages.  Here is an example:

   dathena | tee screen_messages.txt

The file F<screen_messages.txt> can then be appended to an email
message.

=back

=head2 The DOs of reporting bugs

=over 4

=item *

B<DO> try downloading the latest version of the software.  Your
problem may already be solved.

=item *

B<DO> subscribe to the L<Ifeffit mailing list|http://millenia.cars.aps.anl.gov/mailman/listinfo/ifeffit> and
B<DO> try asking your question there.  Your problem may have been
discussed there or it may be of interest to other users.

=item *

B<DO> say which program and which version number you are using.

=item *

B<DO> say what operating system you are using.

=item *

B<DO> provide the crystallographic data and a literature reference to the
crystallographic data when reporting a problem with Atoms.

=item *

B<DO> explain clearly and concisely how to replicate the problem.

=item *

B<DO> send a project file that demonstrates a problem with Athena, or
Artemis.  For a problem with Athena, you may also need to send raw
data.

=item *

B<DO> send a screenshot of the program in action if that helps explain
the problem. PNG is usually the best choice for a screenshot.  GIF is
good also.  JPG and PDF are ok.  TIF sucks.  Attach this image file to
your mail message directly and B<DON'T> embed it in a Word or PowerPoint
file before attaching it.

=item *

B<DO> send any output files that help explain the problem.  Bugs reports
about Atoms almost always require the faulty F<feff.inp> file.

=item *

B<DO> use compressed archives if you must send large numbers of files.
F<.zip>, F<.tar.gz>, or F<.tar.bz2> are all acceptable formats for
compressed archiving.

=item *

B<DO> send a follow-up email if a lot of time has passed without a
response.  Bruce may be on travel or may have set your prior email
aside and forgotten to return to it (which would explain but not
justify a period of silence).  Bruce takes bugs reports very seriously,
sometimes he needs a reminder.

=back

=head2 The DON'Ts of reporting bugs

=over 4

=item *

B<DON'T> ask questions about compiling Feff8 or Feff9. The only
version of Feff that I support at that level is the version of Feff6
that comes with Ifeffit.  For questions about Feff8 or Feff9, contact
someone from the Feff project.

=item *

B<DON'T> send any information in the form of a Word or PowerPoint
document.  It is exceedingly rare that the information conveyed in a
bug report requires formatting capabilities that exist in a word
processor and that don't exist in plain text email.  RTF, OpenOffice,
and the like are not an improvement on Word for the purpose of
reporting a bug.  Indeed, there are situations where using a word
processor makes it harder for me to troubleshoot the problem. For
example, if I ask you to cut and paste some text displayed by one of
the programs, a word processor will change where lines are broken in a
way that is confusing for me.  On Windows, use WordPad rather than
Word for such things.

=item *

B<DON'T> assume that others use the same email program as you.
Specifically B<DON'T> rely upon colored text or fonts in the email
message to convey information -- your email may not display the same
for me as it does for you.

=item *

B<DON'T> send large files (other than the suggestions above) that have
not been requested.  If a large file is needed to understand the
problem, you will be asked for it in a follow-up email.

=item *

B<DON'T> ever send anything by fax.  B<DON'T> ever send anything by
normal post or overnight express.  Remember, this is the 21st century.

=item *

B<DON'T> send every file from a Feff run!  It is usually sufficient to
send just the F<feff.inp> file.  If other files are needed from the
Feff run, you will be asked for them in a follow-up email.

=back

=head1 BUGS AND LIMITATIONS

Please report problems to the Ifeffit Mailing List
(L<http://cars9.uchicago.edu/mailman/listinfo/ifeffit/>)

Patches are welcome.


=head1 AUTHOR

Bruce Ravel (L<http://bruceravel.github.io/home>)

L<http://bruceravel.github.io/demeter/>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2008-2016 Bruce Ravel (L<http://bruceravel.github.io/home>). All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlgpl>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

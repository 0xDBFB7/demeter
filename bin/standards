#!/usr/bin/perl -I/home/bruce/codes/demeter/lib

=begin Explanation
  This is the beginning of a demeter-based tool to replace and expand
  upon the booklet of foil reference spectra that comes with a box of
  foils from EXAFS Materials.
  .
  This version will plot mu(E) and derivative spectra interactively or
  generate html output.  Eventually latex and athena output will also
  be available.  It is extensible in the sense that new elements and
  new materials can be added to the list of standards.

=cut

=begin Copyright
 Copyright (c) 2008-2009 Bruce Ravel (bravel AT bnl DOT gov). All rights reserved.
 .
 This example is free software; you can redistribute it and/or
 modify it under the same terms as Perl itself. See L<perlgpl>.
 .
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

BEGIN {
  my $target = q{};
  foreach my $a (@ARGV) {
    ($target = $a) if ($a =~ m{athena|latex|screen|web});
  };
  if ($target eq 'screen') {
    my $width = (split(" ", `stty size`))[1];
    die "Your screen must be at least 80 characters wide for this program.\n" if ($width<80);
  } elsif (($target eq 'web') or ($target eq 'latex')) {
    $ENV{PGPLOT_DEV} = '/null';
  };
};


use Chemistry::Elements qw(get_Z get_name);
use File::Basename;
use File::Spec;
use Term::ReadLine;
use Text::Template;

use Demeter;
use Demeter::UI::Standards;
my $demeter = Demeter->new;
$demeter->set_mode(screen=>0, repscreen=>0);
my $standards = Demeter::UI::Standards->new();
$standards -> ini(q{});

$| = 1;

use Getopt::Long;
my ($light_background, $dark_background) = (0, 1);
my ($folder, $quiet, $skip, $noimage) = ('./', 0, 0, 0);
my ($prjfile, $elements, $all) = (q{}, q{}, 0);
my ($help, $use_gnuplot) = (0, 0);
my $result = GetOptions (
			 "d"            => \$dark_background,
			 "l"            => \$light_background,
			 "folder|f=s"   => \$folder,
			 "quiet|q"      => \$quiet,
			 "skip|s"       => \$skip,
			 "noimage|n"    => \$noimage,
			 'outfile|o=s'  => \$prjfile,
			 'elements|e=s' => \$elements,
			 'a'            => \$all,
			 "help|h"       => \$help,
			 "g"            => \$use_gnuplot,
			);
help() if $help;
($light_background = 1) if (not $dark_background);
$demeter->plot_with('gnuplot') if $use_gnuplot;

my $target = $ARGV[0] || 'screen';
TARGET: {
  ($target eq 'screen') and do {
    screen($standards);
    last TARGET;
  };

  ($target eq 'web') and do {
    web($standards);
    last TARGET;
  };

  ($target eq 'latex') and do {
    #tex($standards);
    warn "not doing latex yet\n";
    last TARGET;
  };

  ($target eq 'athena') and do {
    athena($standards);
    last TARGET;
  };

  screen($standards);
};

sub screen {
  my ($standards) = @_;
  my ($choice, $element, $which, $error) = ('fe', 'fe', 'mu', q{});
  #$demeter->po->start_plot; # reset the plot for the next go around
  my $term = new Term::ReadLine 'Reference spectra';
  print $standards->screen($choice, $element, $light_background, $error);
  my $prompt = "Enter an element or material, a number to plot, or q=quit > ",;
  while ( defined ($_ = $term->readline($prompt)) ) {
    $demeter->po->cleantemp, exit if ($_ =~ m{\Aq});
    $error = q{};

    if ($standards -> element_exists (lc($_)) or
	$standards -> material_exists(lc($_)))   {
      $choice = lc($_);
      $element = $choice;
      ($element = $standards->get($choice,"element")) if $standards -> material_exists($choice);

    } elsif ($_ =~ m{\A([123])}) {
      $demeter->po->start_plot; # reset the plot for the next go around
      if ($standards -> material_exists($choice)) {
	$which  = ($1 == 1) ? 'mu'
	        : ($1 == 2) ? 'derivative'
                :             'filter';
	if ($which eq 'filter') {
	  $standards -> filter_plot($element);
	} else {
	  $error = $standards->plot($choice, $which, 'screen');
	};
      };
    };

    print $standards->screen($choice, $element, $light_background, $error);
  };
};


sub web {
  my ($standards) = @_;
  mkdir $folder if not -d $folder;
  my @materials = $standards->material_list;

  print "writing index file\n" if not $quiet;
  ## make index.html
  my $indexfile = File::Spec->catfile($folder, "index.html");
  $standards -> html_index($indexfile);

  ## make each page
  foreach my $m (@materials) {
    next if ($m eq 'config');
    $standards -> html({
			material => $m,
			folder   => $folder,
			verbose  => !$quiet,
			skip     => $skip,
			noimage  => $noimage,
		       });
  };
};

sub athena {
  my ($standards) = @_;
  die "no output project filename specified.\n" if (not $prjfile);
  my @materials = $standards->material_list;
  my @list = ();
  if ($all) {
    @list = @materials;
  } else {
    @list = split(/,\s*/, $elements);
  };

  my $number = $standards -> athena({elements => \@list,
				     prjfile  => $prjfile,
				     verbose  => !$quiet,
				    });
  printf("\nWrote %s with %d groups\n", $prjfile, $number) if not $quiet;
};

sub help {
  print <<EOH
A visual interface to a database of XAS standard reference materials.

On-screen:
   standards [-l] screen
      -l                choose colors appropriate to a light background

Generate web pages:
   standards [options] web
      --folder=<folder>, -f <folder>    destination for web pages
      --quiet, -q                       suppress progress message
      --skip, -s                        do not overwrite existing pages
      --noimage, -n                     do not generate images (just html)

Generate latex pages:  (not working yet)
   standards [options] latex

Generate an athena project:
   standards [options] athena
      --output=<file>, -o <file>        athena project file
      --elements=<list>, -e <list>      comma separated list of elements
      -a                                put all materials in project file
EOH
  ;
  exit;
};

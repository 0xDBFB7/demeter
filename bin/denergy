#!/usr/bin/perl

use Pod::Usage;
use Getopt::Long;

my $nocolor = 0;
my $result  = GetOptions ('nocolor|n' => \$nocolor,
			  'help|h' => sub{ pod2usage(1); exit 0},);

my $ANSIColor_exists = (eval "require Term::ANSIColor");
if ($ANSIColor_exists and not $nocolor) {
  import Term::ANSIColor qw(:constants);
} else {
  sub BOLD    {q{}};
  sub YELLOW  {q{}};
  sub CYAN    {q{}};
  sub RED     {q{}};
  sub GREEN   {q{}};
  sub CYAN    {q{}};
  sub RESET   {q{}};
};

use Chemistry::Elements qw(get_Z get_symbol get_name);
use Xray::Absorption;
my $element = ucfirst( lc($ARGV[0]) );
my $edge = lc($ARGV[1]);
my $energy = Xray::Absorption->get_energy($element, $edge);

my $which = ($edge =~ m{\b(?:k|l[1-3]|m[1-5]|n[1-7]|o[1-5]|p[1-3])\b}) ? 'edge' : 'line';

if ($which eq 'edge') {
  printf "\n%s%s%s (%s, #%d) %s%s%s %s energy = %s%s%s eV\n\n",
    BOLD.CYAN, get_name($element), RESET, get_symbol($element), get_Z($element),
      BOLD.GREEN, ucfirst($edge), RESET, $which,
	BOLD.RED, $energy, RESET;
} else {
  printf "\n%s%s%s (%s, #%d) %s%s%s (%s) %s energy = %s%s%s eV\n\n",
    BOLD.CYAN, get_name($element), RESET, get_symbol($element), get_Z($element),
      BOLD.GREEN, ucfirst($edge), RESET, Xray::Absorption->get_IUPAC($edge), $which,
	BOLD.RED, $energy, RESET;
};


=head1 NAME

denergy - Quick display of edge and line energies

=head1 VERSION

This documentation refers to Demeter version 0.9.

=head1 SYNOPSIS

   denergy element edge_or_line

The element can be the 1- or 2-letter symbol, the Z number or the
English language name.  The edge or line can be an edge symbol, a
Siegbahn line symbol, or an IUPAC line symbol.

Examples:

   deneregy Cu K
    ==>  Copper (Cu, #29) K edge energy = 8979 eV

   denergy Pt La1
    ==> Platinum (Pt, #78) La1 (L3-M5) line energy = 9442 eV

=head1 AUTHOR

Bruce Ravel (bravel AT bnl DOT gov)

http://cars9.uchicago.edu/~ravel/software/

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2012 Bruce Ravel (bravel AT bnl DOT gov). All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlgpl>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

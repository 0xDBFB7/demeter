NAME
    Demeter - An object oriented EXAFS data analysis system using Ifeffit

VERSION
    This documentation refers to Demeter version 0.4.0

SYNOPSIS
    Import Demeter components into your program:

      use Demeter;

    This will import all Demeter components into your program. The
    components are:

       Atoms Data Path VPath Fit Feff  and so on...

    Using Demeter automatically turns on strict and warnings.

EXAMPLE
    Here is a complete script for analyzing copper data:

      #!/usr/bin/perl
      use Demeter;  # automatically turn on L<strict> and L<warnings>
      #
      ## make a Data object
      my $dobject = Demeter::Data -> new({group => 'data0',});
      #
      print "Sample fit to copper data using Demeter " . $dobject->version . "\n";
      $dobject->set_mode(screen=>1, ifeffit=>1);
      #
      ## set the processing and fit parameters
      $dobject ->set(file      => "example/cu/cu10k.chi",
                     name      => 'My copper data',
                     is_chi    => 1,
                     fft_kmin  => 3,    fft_kmax  => 14,
                     bft_rmin  => 1,    bft_rmax  => "4.3",
                     fit_space => 'K',
                     fit_k1    => 1,    fit_k3    => 1,
                    );
      #
      ## GDS objects for isotropic expansion + correlated Debye model
      my @gdsobjects =
        (Demeter::GDS ->
            new(type => 'guess', name => 'alpha', mathexp => 0),
         Demeter::GDS ->
            new(type => 'guess', name => 'amp',   mathexp => 1),
         Demeter::GDS ->
            new(type => 'guess', name => 'enot',  mathexp => 0),
         Demeter::GDS ->
            new(type => 'guess', name => 'theta', mathexp => 500),
         Demeter::GDS ->
            new(type => 'set',   name => 'temp',  mathexp => 300),
         Demeter::GDS ->
            new(type => 'set',   name => 'sigmm', mathexp => 0.00052),
        );
      #
      ## Path objects for the first 5 paths in copper (3 shell fit)
      my @pobjects = ();
      foreach my $i (0 .. 4) {
        $pobjects[$i] = Demeter::Path -> new();
        $pobjects[$i ]->set(data     => $dobject,
                            folder   => 'example/cu/',
                            file     => sprintf("feff%4.4d.dat", $i+1),
                            s02      => 'amp',
                            e0       => 'enot',
                            delr     => 'alpha*reff',
                            sigma2   => 'debye(temp, theta) + sigmm',
                           );
      };
      #
      ## Fit object: collection of GDS, Data, and Path objects
      my $fitobject = Demeter::Fit -> new(gds   => \@gdsobjects,
                                          data  => [$dobject],
                                          paths => \@pobjects,
                                         );
      ## do the fit (or the sum of paths)
      $fitobject -> fit;
      #
      ## plot the data + fit + paths in a space
      $dobject -> po -> set(plot_data => 1, plot_fit  => 1,
                            plot_res  => 0, plot_win  => 1,);
      foreach my $obj ($dobject, @pobjects,) {
        $obj -> plot("r");
      };
      #
      ## save the results of the fit and write a log file
      $dobject -> save("fit", "cufit.fit");
      my ($header, $footer) = ("Simple fit to copper data\n", q{});
      $fitobject -> logfile("cufit.log", $header, $footer);

    This example starts by defining each of the data objects. There is one
    data object, 5 path objects, and 6 GDS objects and these are gathered
    into one fit object. The "set_mode" method defines how the Ifeffit
    commands generated will be dispatched -- in this case, to the screen and
    to the Ifeffit process. After the fit is defined by creating the Fit
    object, the fit is preformed calling the "fit" method. This performs the
    fit; retrieves the best fit values, error bars, and correlations; and
    evaluates all path parameters. Then plots are made, the results of the
    fit are saved as an ASCII data file, and a log file is written.

    When a Demeter script exits, care is taken to clean up all temporary
    file that may have been generated during the run.

DESCRIPTION
    This module provides an object oriented interface to the EXAFS data
    analysis capabilities of the popular and powerful Ifeffit package.
    Mindful that the Ifeffit API involves streams of text commands, this
    package is, at heart, a code generator. Many methods of this package
    return text. All actual interaction with Ifeffit is handled through a
    single method, "dispose", which is described below. The internal
    structure of this package involves accumulating text in a scalar
    variable through successive calls to the various code generating
    methods. This text is then disposed to Ifeffit, to a file, or elsewhere.
    The outward looking methods, as shown in the example above, organize all
    of the complicated interactions of your data with Ifeffit.

    This package is aimed at many targets. It can be the back-end of a
    graphical data analysis program, providing the glue between the
    on-screen representation of the fit and the actual command executed by
    Ifeffit. It can be used for one-off data analysis chores -- indeed most
    of the examples that come with the package can be reworked into useful
    one-off scripts. It can also be the back-end to sophisticated data
    analysis chores such as high-throughout data processing and analysis or
    complex physical modeling.

    Demeter is a parent class for the objects that are directly manipulated
    in any real program using Demeter. These are several subclasses:

    Demeter::Data
        The Data object used to import mu(E) or chi(k) data from a column
        data file or an Athena project file. It organizes parameters for
        Fourier transforms, fitting range, and other aspects of the fit.

    Demeter::Data::Prj
        This object is used to interact with the records of an Athena
        project file.

    Demeter::Path
        The Path object used to define a path for use a fit and to set math
        expressions for its path parameters. This object is typically
        associated with a feffNNNN.dat file from a Feff calculation. That
        feffNNNN.dat may have been generated by Feff in the normal manner or
        via the methods of Demeter's Feff object.

    Demeter::VPath
        A virtual path object is a collection of Path objects which can be
        summed and plotted as a summation.

    Demeter::SSPath
        This is a way of generating an arbitrary sungle scattering path at
        an arbitrary distance using the potentials of a Feff object.

    Demeter::GDS
        The object used to define a guess, def or set parameter for use in
        the fit. This is also used to define restraints and a few other
        kinds of parameters.

    Demeter::Fit
        This object is the collection of Data, Path, and GDS objects which
        compromises a fit.

    Demeter::Atoms
        A crystallography object which is used to generate the structure
        data for a Feff object.

    Demeter::Feff
        A object defining the contents of a Feff calculation and providing
        methods for running parts of Feff. This object provide a flexible
        interface to Feff which is intended to address many of Feff's
        shortcomings and obviate the need to interact directly with Feff via
        its input file.

    Demeter::ScatteringPath
        An object defining a scattering path from a Feff object. This may be
        linked to a Path object used in a fit.

    Demeter::Plot
        The object which controls how plots are made from the other Demeter
        objects. As described in its document, access to this object is
        provided in a consistent manner and is available to all other
        Demeter objects.

    Demeter::Config
        The object which controls configuraton of the the Demeter system and
        its components. This is a singleton object (i.e. only one exists in
        any instance of Demeter). As described in its document, access to
        this object is provided in a consistent manner and is available to
        all other Demeter objects.

    Each of these objects is implemented using Moose, the amazing
    meta-object system for Perl. Although Moose adds some overhead at
    start-up for any application using Demeter, its benefits are legion. See
    Moose and <http://www.iinteractive.com/moose> for more information.

PRAGMATA
    Demeter pragmata are ways of affecting the run-time behavior of a
    Demeter program by specfying that behavior at compile-time.

         use Demeter qw(:plotwith=gnuplot)
       or
         use Demeter qw(:ui=screen)
       or
         use Demeter qw(:plotwith=gnuplot :ui=screen)

    ":plotwith=XX"
        Specify the plotting backend. The default is "pgplot". The other
        option is "gnuplot". A "demeter" option will be available soon for
        generating perl scripts which plot.

        This can also be set during run-time using the "plot_with" method
        during run-time.

    ":ui=XX"
        Specify the user interface. Currently the only option is "screen".
        Setting the UI to screen does two things:

        1.  Uses Demeter::UI::Screen::Interview as a role for the Fit
            object. This imports the "interview" method for use with the Fit
            object, allowing you to interact with the results of a fit in a
            simple manner at the console.

        2.  Uses Term::Twiddle to provide some visual feedback on the screen
            while the fit or summation is happening. This adds no real
            functionality, but serves to make it clear that *something* is
            happening during the potentially lengthy fit.

        The interview method uses Term::ReadLine. This is made into a
        pragmatic interaction in Demeter in case you want to use
        Term::ReadLine in some other way in your program. Not importing the
        interview method by default allows you to avoid this error message
        from Term::ReadLine when you are using it in some other capacity:
        "Cannot create second readline interface, falling back to dumb."

        Also Term::Twiddle is not imported until it is needed, allowing this
        dependeny to be relaxed from a requirement to a suggestion.

        Future UI options might include "tk", "wx", or "rpc".

    ":template=XX"
        Specify the template set to use for data processing and fitting
        chores. The options are

        "ifeffit"
            The default -- a concise set of command tempates for Ifeffit
            1.2.10.

        "iff_columns"
            An alternate set of command teampates for Ifeffit 1.2.10 which
            attempt to line everything up in easy-to-read columnar
            formatting.

        "feffit"
            Generate text suitable for the old Feffit program

        "demeter"
            Generate text in the form of valid perl using Demeter. This is
            intended to allow a GUI to export a valid demeter script. Note:
            this template set has not been written yet.

        In the future, a template set will be written when Ifeffit 2 becomes
        available.

        These can also be set during run-time using the "set_mode" method --
        see Demeter::Mode.

METHODS
    An object of this class represents a part of the problem of EXAFS data
    processing and analysis. That component might be data, a path from Feff,
    a parameter, a fit, or a plot. Moose provides a sane, solid, and
    consistent way of interacting with these objects.

    Not every method shown in the example above is described here. You need
    to see the subclass documentation for methods specific to those
    subclasses.

  Constructor and accessor methods
    These are the basic methods for constructing objects and accessing their
    attributes.

    "new"
        This the constructor method. It builds and initializes new objects.

          use Demeter;
          my $data_object = Demeter::Data -> new;
          my $path_object = Demeter::Path -> new;
          my $gds_object  = Demeter::GDS  -> new;
            ## and so on ...

        New can optionally take an array of attributes and values with the
        same syntax as the "set" method.

    "clone"
        This method clones an object, returning the reference to the new
        object.

          $newobject = $oldobject->clone(@new_arguments);

        Cloning returns the reference and sets all attributes of the new
        object to the values for the old object. The optional argument is a
        reference to a hash of those attributes which you wish to change for
        the new object. Passing this hash reference is equivalent to cloning
        the object, then calling the "set" method on the new object with
        that hash reference.

    "set"
        This method sets object attributes. This is a convenience wrapper
        around the accessors provided by Moose.

          $data_object -> set(fft_kmin=>3.1, fft_kmax=>12.7);
          $path_object -> set(file=>'feff0123.dat', s0=>'amp');
          $gds_object  -> set(Type=>'set', name=>'foo', mathexp=>7);

        The set method of each subclass behaves slightly differently for
        each subclass in the sense that error checking is performed
        appropriately for each subclass. Each subclass takes a hash
        reference as its argument, as shown above. An exception is thrown is
        you attempt to "set" an undefined attribute for every subclass
        except for the Config subclass.

        The argument are simply a list (remember that the => symbol is
        sytactically equivalent to a comma). The following are equivalent:

            $data_object -> set(file => "my.data", kmin => 2.5);
          and
            @atts = (file => "my.data", kmin => 2.5);
            $data_object -> set(@atts);

        The sense in which this is a convenience wrapper is in that the
        following are equivalent:

            $data_object -> set(fft_kmin=>3.1, fft_kmax=>12.7);
          and
            $data_object -> fft_kmin(3.1);
            $data_object -> fft_kmax(12.7);

        The latter two lines use the accessors auto-generated by Moose. With
        Moose, accessors to attributes have names that are the same as the
        attributes. The "set" method simply loops over its arguments,
        calling the appropriate accessor.

    "get"
        This is the accessor method. It "does the right thing" in both
        scalar and list context.

          $kmin = $data_object -> get('fft_kmin');
          @window_params = $data_object -> get(qw(fft_kmin fft_kmax fft_dk fft_kwindow));

        See the documentation for each subclass for complete lists of what
        attributes are available for each subclass. An exception is thrown
        if you attempt to "get" an undefined attribute for all subclasses
        except for the Config subclass, which is specifically intended to
        store user-defined parameters.

    "serialize"
        Returns the YAML serialization string for the object. See the Fit
        objects serialize method for complete details of serialization of a
        fitting model.

    "matches"
        This is a gneeralized way of testing to see if an attribute value
        matches a regular expression. By default it tries to match the
        supplied regular expression again the "name" attribute.

          $is_match = $object->matches($regexp);

        You can supply a second argument to match against some other
        attribute. For instance, to match the "group" attribute against a
        regular expression:

          $group_matches = $object->matches($regexp, 'group');

  Data processing methods
    A system is built into Demeter for keeping track of the state of your
    objects. It is, therefore, rarely necessary to explicitly invoke the
    data processing methods. If you call the "plot", Demeter will call the
    "read_data", "normalize", "fft", and "bft" methods as needed to
    correctly make the plot. As you change the attributes of the Data
    object, Demeter will keep track of which data processing stages need to
    be redone. Consequently, the "plot" method may be the only data
    processing method you ever need to call.

    This section, then, is included in the documentation for the sake of
    completeness and to give you a sense of what Demeter is doing behind the
    scenes when you ask it to make a plot.

    These methods call the corersponding code generating methods then
    dispose of that code. The code generators are not explicitly documented
    and should rarely be necessary to call directly.

    "read_data"
        This method returns the Ifeffit command for importing data into
        Ifeffit

          $command = $data_object->read_data;

        This method is more commonly used for Data objects. Calling this
        method on a Path object will import the raw "feffNNNN.dat" file. See
        the "write_path" method of the Path subclass for importing a
        "feffNNNN.dat" file and turning it into chi(k) data.

    normalization and background removal
        See Demeter::Data::Mu.

    "fft"
        This method performs a forward Fourier transform on your chi(k) data
        using parameters that have been established using the "set" method.

          $object -> fft;

        If the data need to be imported, they will be automatically.

    "bft"
        This method performs a backward Fourier transform on your chi(R)
        data using parameters that have been established using the "set"
        method.

          $object -> bft;

        If the data need to be imported or forward transformed, they will be
        automatically.

  I/O methods
    "plot"
        This method plots your data in the indicated space, where the space
        is one of E, k, R, or q. The details of how that plot is made are
        determined by the Plot object.

          $object -> plot($space);

        If the data need to be imported, forward transformed, or backward
        transformed, they will be automatically.

        Only Data and Path objects can be plotted. Attempting to plot other
        object types will throw and exception.

    "save"
        This saves data or a path as a column data file.

           $command = $object -> save($argument);

        The types of saved file, indicated by the argument, are

        xmu 7 columns: energy, mu(E), bkg(E), pre-edge line, post-edge line,
            derivative of mu(E), second derivative of mu(E).

        norm
            7 columns: energy, norm(E), bkg(E), flattened mu(E), flattened
            background, derivative of norm(E), second derivative of norm(E).

        chi 6 or 7 columns: k, chi(k), window, k*chi(k), k^2*chi(k),
            k^3*chi(k). If an arbitrary k-weighting is used, an additional
            column with that k-weighting will be written.

        R   6 columns: R, real part, imaginary part, magnitude, phase, R
            window

        q   7 columns: q, real part, imaginary part, magnitude, phase, k
            window, k-weighted chi(k) using the k-weighting of the Fourier
            transform. This last column can be plotted with the real part to
            make a kq plot.

        fit 6 or 7 columns: k, chi(k), fit(k), residual, background (if
            fitted), window.

  "dispose"
    This method is used to dispatch Ifeffit commands by hand. It is used
    internally by many of the methods typically invoked in your programs.

      $object -> dispose($ifeffit_command);

    See the document page for Demeter::Dispose for complete details.

  Operation modes
    There are a few attributes of a Demeter application that apply to all
    Demeter objects in use in that application. Most of these attributes
    have to do with how the command generated by the various Demeter methods
    get disposed of by the "dispose" method. The special Mode subclass keeps
    track of these global attributes. The Mode methods described below are
    the way you will typically intract with the Mode object.

    Here is a list of all these global attributes:

    ifeffit
        This is a boolean attribute. When true, the "dispose" method sends
        commands to the Ifeffit process. By default this is true.

    screen
        This is a boolean attribute. When true, the "dispose" method sends
        commands to STDOUT, which is probably displayed of the screen in a
        terminal emulator. This is very handy for examining the details of
        how Demeter is interacting with Ifeffit, either for understanding
        Ifeffit's behavior or for debugging Demeter. By default this is
        false.

    file
        When true, the "dispose" method sends commands to a file. The true
        value of this attribute is interpreted as the file name. The file is
        opened and closed each time "dispose" is called. Therefore it is
        probably prudent to give this attribute a value starting with an
        open angle bracket, such as ">filename". This will result in
        commands being appended to the end of t he named file. Note also
        that you will need to unlink the file at the beginning of your
        script if you do not want your commands appended to the end of an
        existing file. (That is, indeed, awkward behavior wich needs to be
        improved in future versions of Demeter.) By default this is false.

    buffer
        When true, the "dispose" method stores commands in a memory buffer.
        The true value of this attribute can either be a reference to a
        scalar or a reference to an array. If the value is a scalar
        reference, the commands will be concatinated to the end of the
        scalar. If the value is an array reference, each command line (where
        a line is terminated with a carriage return) will become an entry in
        the array. (A future improvement would be to allow this to take a
        reference to an arbitrary object so that the commands can
        beprocessed in some domain-specific manner. By default this is
        false.

    plot
        This attribute is the reference to the current Plot object. A plot
        object is created as the Demeter package is loaded into your
        program, so it is rarely necessary to set this attribute or to
        create a Plot object by hand. However, if you need to maintain two
        or more Plot objects, this attribute is the mechanism for
        controlling which gets used when plots are made.

    config
        This attribute is the reference to the singletoin Config object,
        which serves two puproses. It is Demeter's mechanism for handling
        system-wide and user configuration. It is also the tool provided for
        user-defined parameters. This latter capacity is used extensively in
        many of the data processing chores for transmitting particular
        parameters to the template files used to generate Ifeffit and
        plotting commands.

    template_process
        Set the template set for data processing. Currently in the
        distribution are "feffit", "ifeffit" and "iff_columns".

    template_fit
        Set the template set for data analysis. Currently in the
        distribution are "feffit", "ifeffit" and "iff_columns".

    template_plot
        Set the template set for plotting. Currently in the distribution are
        "pgplot" and "gnuplot".

    template_feff
        Set the template set for generating feff files. Currently in the
        distribution are "feff6", "feff7", and "feff8".

    The methods for accessing the operation modes are:

    "set_mode"
        This is the method used to set the attributes described above. Any
        Demeter object can call this method.

           $object -> set_mode(ifeffit => 1,
                               screen  => 1,
                               buffer  => \@buffer_array
                              );

        See <Demeter:Dispose> for more details.

    "get_mode"
        When called with no arguments, this method returns a hash of all
        attributes their values. When called with an argument (which must be
        one of the attributes), it returns the value of that attribute. Any
        Demeter object can call this method.

           %hash = $object -> get_mode;
           $value = $object -> get_mode("screen");

        See <Demeter:Dispose> for more details.

  Convenience methods
    "co"
        This returns the Config object. This is a wrapper around "get_mode"
        and is intended to be used in a method call chain with any Demeter
        object. The following are equivalent:

          my $config = $data->get_mode("params");
          $config -> set_default("clamp", "medium", 20);

        and

          $data -> co -> set_default("clamp", "medium", 20);

        The latter involves much less typing!

    "po"
        This returns the Plot object. Like the "co" method, this is a
        wrapper around "get_mode" and is intended to be used in a method
        call chain with any Demeter object.

          $data -> po -> set("c9", 'yellowchiffon3');

    "mo"
        This returns the Mode object. This is intended to be used in a
        method call chain with any Demeter object.

          print "on screen!" if ($data -> mo -> ui eq 'screen');

    "dd"
        This returns the default Data object. When a Path object is created,
        if it is created without having its "data" attribute set to an
        existing Data object, a new Data object with sensible default values
        for all of its attributs is created and stored as the "datadefault"
        attribute of the Mode object.

        Path objects always rely on their associated Data objects for
        plotting and processing parameters. So every Path object must have
        an associated Data object. If the "data" attribute is not specified
        by the user, the default Data object will be used.

          print ref($object->dd);
               ===prints===> Demeter::Data

  Utility methods
    Here are a number of methods used internally, but which are available
    for your use.

    "hashes"
        This returns a string which can be used as a comment character in
        Ifeffit. The idea is that every comment included in the commands
        generated by methods of this class use this string. That provides a
        way of distinguishing comments generated by the methods of this
        class from other comment lines sent to Ifeffit. This is a user
        interface convenience.

           print $object->hashes, "\n";
               ===prints===> ###___

    "group"
        This returns a unique five-character string for the object. For Data
        and Path objects, this is used as the Ifeffit group name for this
        object.

    "name"
        This returns a short, user-supplied, string identifying the object.
        For a GDS object, this is the parameter name. For Path and Data
        objects, this is the string that will be put in a plot legend.

    "data"
        Path objects (also VPath and SSPath) are associated with Data
        objects. This method returns the reference to the associated Data
        object. For Data objects, this returns a reference to itself. For
        other object types this returns a false value.

    "plottable"
        This returns a true value if the object is one that can be plotted.
        Currently, Data, Path, VPath, and SSPath objects return a true
        value. All others return false.

           $can_plot = $object -> plottable;

  Utility methods
    Demeter provides a generic mechanism for reporting on errors in a
    fitting model. When using Demeter non-interactively, useful messages
    about problems in the fitting model will be written to standard output.
    Critical problems in a non-interactive mode will be cause the script to
    croak (see Carp).

    In an interactive mode (such as with the Wx interface), the
    "add_trouble" method is used to fill the "trouble" attribute, which is
    inherited by all Demeter objects. In the default, untroubled state, an
    object will have the "trouble" attribute set to an empty string (i.e.
    something logically false). As problems are found in the fitting model
    (see Demeter::Fit::Sanity), the "trouble" attribute gets short text
    strings appended to it. The list of problems an object has are separated
    by pipe characters ("|").

    See Demeter::Fit::Sanity for a complete description of these problem
    codes. The Fit, Data, Path, and GDS objects each have their own set of
    problem codes.

DIAGNOSTICS
CONFIGURATION AND ENVIRONMENT
    See Demeter::Config for details about the configuration system.

DEPENDENCIES
    The dependencies of the Demeter system are in the
    Bundle/DemeterBundle.pm file.

BUGS AND LIMITATIONS
    *   Template evaluation is a potential security hole in the sense that
        someone could put something like "system 'rm -rf *'" in one of the
        templates. Text::Template supports using a Safe compartment.

    *   Serialization is incompletely implemented at this time.

    *   You can switch plotting backends on the fly, but all parameter
        values get reset to their defaults.

    Please report problems to Bruce Ravel (bravel AT bnl DOT gov)

    Patches are welcome.

VERSIONS
    0.4.1
        Now supplying the "bootstrap" script in an attempt to ease initial
        installation. Also building the DPG with a PL_file at build time.

        Fixed a bug setting the Plot object space attribute in quad, stddev,
        and variance plots. Added stddev and variance plots to the merge
        example in "harness".

AUTHOR
    Bruce Ravel (bravel AT bnl DOT gov)

    http://cars9.uchicago.edu/~ravel/software/

LICENCE AND COPYRIGHT
    Copyright (c) 2006-2010 Bruce Ravel (bravel AT bnl DOT gov). All rights
    reserved.

    This module is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself. See perlgpl.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


[% META title = 'Introduction'
        about = ''
	chapter = 1
	nosubpages = 1
%]


[% FILTER html_para %]
[% feff %] and [% ifeffit %] are amazing tools.
[% END %]

[% PROCESS section label="The technology behind Demeter" %]

[% FILTER html_para %]
[% demeter %] uses [% INCLUDE html/link
link="http://perl.org" text="perl" %].  This is, I suppose, an unsexy
choice these days.  All the cool kids are, after all, using python or
ruby.  I like perl.  I can think in perl.  And I can code quickly and
fluently in perl.  What's more, perl has [% INCLUDE html/link
link="http://www.cpan.org/" text="CPAN" %], the worlds largest
repository of language extensions.  CPAN means that I have far fewer
wheels to recreate (and probably get wrong).  Virtually any language
extension I need in pursuit of making [% demeter %] awesome probably
already exists.

[%# ' %]


[% demeter %] uses [% INCLUDE html/link
link="http://search.cpan.org/~flora/Moose/lib/Moose/Manual.pod" text="Moose" %].  This is,
on the balance, a very good thing, indeed.  Moose brings many powerful
capabilities to the programming table.  When I was about halfway
through writing [% demeter %], I paused for a bit less than a month to
rewrite everything I had thus far created to use Moose.  This left me
with about 2/3 as many lines of code and a code base that was more
robust and more featureful.  Neat-o!

For the nerdly, Moose is an implementation of a [% INCLUDE html/link
text="meta-object protocol"
link="http://en.wikipedia.com/wiki/Metaobject" %].  This interesting
and powerful tool allows for the semantics of the object system to be
modified at either compile or run time.  The problem of adding
features and functionality to the object system is therefore pushed
downstream from the developers of the language to the users of the
language.  In good CPAN fashion, a healthy and robust ecosystem has
evolved around Moose producing a whole host of useful extensions.

Moose offers lots of great features, including an extremely powerful
attribute system, a type attribute system, method modifiers, an
ability to mix object and aspect orientation, and a wonderfully deep
set of automated tests.  I am confident that simply by using Moose, my
code is better code and, because Moose testing is so deep, I am
confident that any bugs in [% demeter %] are my fault and not the
fault of the people whose work I depend on.

For all the wonderfulness of Moose, it does have one big wart that I
need to be up-front about.  Moose is slow at start-up.  Since 
[% demeter %] is big and Moose starts slowly, any program using 
[% demeter %] will take about 2 extra second to start.  For a
long-running program like a complicated fitting script or a GUI, an
additional couple of seconds at start-up is no big deal.  For
quick-n-dirty or one-off application, that may a bit annoying.  The
Moose folk claim to be working on start-up issues.  I am keeping my
fingers crossed.  Until then, I live with the slow start-up, confident
that the rest of [% demeter %] is worth the wait.

I will, on occassion in this document, point the reader to web sites
where more of the programming details can be found.
[% END %]

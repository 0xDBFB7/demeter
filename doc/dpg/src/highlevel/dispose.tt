[% META title = 'Command disposal and command templates' %]

[% FILTER html_para %]
[% demeter %] uses a highly abstract system for communicating with 
[% feff %], [% ifeffit %], and the plotting [% backend %].  The 
[% INCLUDE html/link text="Text::Template"
                     link="http://search.cpan.org/~mjd/Text-Template/" %]
module is used along with a large number of small, external template
files.  The idea behind 
[% INCLUDE html/link text="Text::Template"
                     link="http://search.cpan.org/~mjd/Text-Template/" %]
is quite simple.  Perl code is interspersed with normal text.  A pass
over the text is made and the perl code is evaluated.  In this way, a
bit of text is made that is specifically relevant to a particular
situation.  As an example, here is the template that [% demeter %]
uses to construct the [% ifeffit %] command used to normalize the 
[% mu %] data associated with a Data object.
[% END %]

[% WRAPPER html/pre %]
{ [% hash %] -*- ifm -*-
  [% hash %] pre-edge template
  [% hash %]   {$D->group} returns the ifeffit group name
  [% hash %]   {$D->parameter} returns the value of that parameter
}

pre_edge("{$D->group}.energy+{$D->bkg_eshift}", 
         {$D->group}.xmu, 
         e0         = {$D->bkg_e0},
         pre1       = {$D->bkg_pre1}, 
         pre2       = {$D->bkg_pre2}, 
         norm_order = {$D->bkg_nnorm},
	 norm1      = {$D->bkg_nor1}, 
         norm2      = {$D->bkg_nor2})
[% END %]

[% FILTER html_para %]
In this example, [% INCLUDE font/mono a="\$D" %] represents the Data
object.  Thus [% ifeffit %]'s[%#'%] [% INCLUDE font/mono a="pre-edge" %]
command is filled in ith attribute values apprporiate to the current
Data object.

The text generated from the processing of the template is then
disposed of via one or more avenues, one of which may include sending
the text to [% ifeffit %] for processing.

This section explains all of the disposal and templating options
available to a [% demeter %] program.
[% END %]

[% PROCESS section label="Command disposal" %]

[% FILTER html_para %]
Once commands have been processed using the templating system, there
are seevral avenues for disposing of those commands.  The most obvious
avenue is to send the commands to [% ifeffit %] so that the actual
data can be processed.  However, several other options are possible.

The [% INCLUDE font/mono a="dispose" %] method is a method of the base
class and inherited by all objects.  It is used all throughout 
[% demeter %] to get things done and is available for explicit use in
[% demeter %] programs.  The syntax is quite simple:
[% END %]

[% WRAPPER codesample -%]
$any_object -> dispose($text);
$any_object -> dispose($text, 'plotting');
[% END %]

[% FILTER html_para %]
The first line is used for any data processing command.  The second
form, with the second argument to the method, is used to identify
command text which is explicitly used to make plots.  When using the
PGPLOT plotting back end, there is not actually a significant
difference between plotting and non-plotting commands since 
[% ifeffit %] is used to send command to PGPLOT.  However, when using
other plotting backends, it is essential that plotting commands be
apprpriately flagged.  Plotting backends are discussed in more detail
in [% INCLUDE html/link text="the user interface chapter" link="../ui.html" %].

The [% INCLUDE font/mono a="\$text" %] given as an argument to the 
[% INCLUDE font/mono a="dispose" %] method typically comes from the
evaluation of a template, but can be any text generated in any
fashion.  Thus, it is a completely generic way for a program to
communicate with [% demeter %]'s[%#'%] backends.

The targets of the [% INCLUDE font/mono a="dispose" %] method are set
using the [% INCLUDE font/mono a="set_mode" %] method, another method
of the base class which is inherited by all objects.  The syntax of
[% INCLUDE font/mono a="set_mode" %] is consistent with other 
methods in [% demeter %]:
[% END %]

[% WRAPPER codesample -%]
$any_object -> set_mode(screen=>1, backend=>1);
[% END %]

[% FILTER html_para %]
Any command can be sent to multiple targets.
The disposal targets which can be set using [% INCLUDE font/mono
a="set_mode" %] are:
[% END %]

[% WRAPPER html/list type="dl" %]
[% WRAPPER html/dt dt="ifeffit" %]
When true, commands will be sent to [% ifeffit %].  It is often useful
to turn this disposal target off when debugging [% demeter %] programs.
[% END %]
[% WRAPPER html/dt dt="screen" %] When true, commands will be sent
to standard output (usually the screen).  Turning this disposal target
on is often useful  when debugging [% demeter %] programs.
[% END %]
[% WRAPPER html/dt dt="plotscreen" %] When true, plotting commands
will be sent to standard output (usually the screen).  Turning this
disposal target 
on is ofetn useful  when debugging [% demeter %] programs.
[% END %]
[% WRAPPER html/dt dt="repscreen" %] When true, the reprocessed
commands (discussed below) will be sent to standard output (usually the screen).
[% END %]
[% WRAPPER html/dt dt="file" %] When set to a string value, that
string will be interpretted as a file name to be opened for writing
and the commands will then be written to that file.  To append text to a
file, the [% INCLUDE font/mono a="file" %] mode string should begin
with the [% INCLUDE font/mono a=">" %] character.
[% END %]
[% WRAPPER html/dt dt="plotfile" %] When set to a string value, that
string will be interpretted as a file name to be opened for writing
and the plotting commands will then be written to that file.  To
append text to a 
file, the [% INCLUDE font/mono a="file" %] mode string should begin
with the [% INCLUDE font/mono a=">" %] character.
[% END %]
[% WRAPPER html/dt dt="repfile" %]  When set to a string value, that
string will be interpretted as a file name to be opened for writing
and the reprocessed commands (discussed below)will then be written to
that file.  To append text to a 
file, the [% INCLUDE font/mono a="file" %] mode string should begin
with the [% INCLUDE font/mono a=">" %] character.
[% END %]
[% WRAPPER html/dt dt="buffer" %] When set to an array reference,
commands will be pushed onto that array.  When set to a scalar
reference, commands will be concatinated to the end of the strings
held by the scalar. 
[% END %]
[% WRAPPER html/dt dt="plotbuffer" %] When set to an array reference,
plotting commands will be pushed onto that array.  When set to a scalar
reference, plotting commands will be concatinated to the end of the strings
held by the scalar. 
[% END %]
[% WRAPPER html/dt dt="callback" %] When set to a code reference,
the text of the command will be sent to that code reference as the
sole argument.  This is useful for user interfaces that want to
post-process the commands.  For example, this disposal mode is used by
[% artemis %] to display colorized text in its command buffer.
[% END %]
[% WRAPPER html/dt dt="plotcallback" %] When set to a code reference,
the text of the plotting command will be sent to that code reference as the
sole argument.  This is useful for user interfaces that want to
post-process the commands.  For example, this disposal mode is used by
[% artemis %] to display colorized text in its plotting buffer.
[% END %]
[% WRAPPER html/dt dt="feedback" %] When set to a code reference,
the text of [% ifeffit %]'s[%#'%] response to commands will be sent to that
code reference as the 
sole argument.  This is useful for user interfaces that want to
post-process the commands.  For example, this disposal mode is used by
[% artemis %] to display colorized text in its command buffer.
[% END %]
[% END %]

[% PROCESS section label="Reprocessed commands" %]

[% FILTER html_para %]
[% demeter %] tries to use [% ifeffit %] as efficiently as possibly.
On one hand, [% ifeffit %] the one of the things that makes 
[% demeter %] go and so is indispensible.  On the other hand, the
business of communicating between perl code and the [% ifeffit %]
library is 
([% INCLUDE html/link text="with one exception" link="../feff/pathfinder.html" %])
always the slowest thing that [% demeter %] does.  One of the
optimizations implemented by [% demeter %] is the reprocessing of
commands targeted for disposal to [% ifeffit %].

Command strings in [% ifeffit %] can be quite long -- up to 2048
characters as it is normally compiled.  A command that is split over
multiple lines, as the example at the beginning of this section is,
will be processed much faster if [% demeter %] pre-processes the
command to remove unnecessary line breaks.  Basically this means that
everything between parentheses will be sent to [% ifeffit %] as a
single string.  This is accomplished within the [% INCLUDE font/mono
a="dispose" %] method via the application of a few regular
expressions.  The reprocessed string is then sent to [% ifeffit %].

As a small example of how reprocessing works, this human-friendly
command:
[% END %]

[% WRAPPER html/pre %]
pre_edge("data0.energy+0",
         data0.xmu,
         e0         = -9999999,
         pre1       = -150,
         pre2       = -30,
         norm_order = 3,
         norm1      = 150,
         norm2      = 1800)                                                                                            
[% END %]

[% FILTER html_para %]
will be reprocessed into this one-line command before being shuffled
off to [% ifeffit %].
[% END %]

[% WRAPPER html/pre %]
pre_edge("data0.energy+0", data0.xmu, e0=-9999999, pre1=-150, pre2=-30, norm_order=3, norm1=150, norm2=1800)
[% END %]

[% FILTER html_para %]
which, when summed over dozens or hundreds of [% ifeffit %] commands,
results in a substantial performance improvement.

The [% INCLUDE font/mono a="repscreen" %] and 
[% INCLUDE font/mono a="repfile" %] disposal targets are provided to
debug the behavior of this optimization.  Reprocessing is quite well
tested.  However, if you suspect that reprocessing is damaging the
commands sent to [% ifeffit %], use one of those disposal channels to
see the text that is actually being sent.
[% END %]


[% PROCESS section label="Command templates" %]

[% FILTER html_para %]
[% demeter %] ships with [% INCLUDE font/b a="a lot" %] of templates.
Each template encapsulates a small bit of functionality and 
[% demeter %] does many things.  The
templates are organized into
[% INCLUDE font/quote a="template sets" %], which are written for
specific backend targets, and 
[% INCLUDE font/quote a="template groups" %] which, are groups of
templates which serve related functions.  All template sets must
have a complete representation of template groups to be fully
functional.

The templates are found in [% INCLUDE font/file a="lib/templates/" %]
directory underneath the installation location of the [% demeter %]
package.  One of the reasons for explaining the templating system in
this level of detail is to underscore that it is quite possible to add
new template sets.  By following the model of the existing template
sets, new output types can be created for [% demeter %].  Indeed, when
[% ifeffit2 %] finally makes its appearence, it should be relatively
simple to extend [% demeter %] to use it simply by creating an
apprporiate template set.

Choosing between template sets is one of the topics of 
[% INCLUDE html/link text="the next section" link="mode.html" %].
[% END %]

[% PROCESS subsection label="Template sets" %]

[% FILTER html_para %]
Template sets describe backend targets for disposed commands.  There
are four different categories of template sets:
[% END %]

[% WRAPPER html/list type="ol" %]
[% WRAPPER html/li %]
Data processing commands
[% END %]
[% WRAPPER html/li %]
Plotting commands
[% END %]
[% WRAPPER html/li %]
[% feff %] input templates
[% END %]
[% WRAPPER html/li %]
[% atoms %] input templates
[% END %]
[% END %]

[% FILTER html_para %]
[% demeter %] currently ships with four different sets in the data
processing category.  
[% END %]

[% WRAPPER html/list type="ol" %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="ifeffit" %], templates which write the syntax
of [% ifeffit %] is a compact form.
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="iff_columns" %], templates which write the syntax
of [% ifeffit %] is a more human-readable form.
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="feffit" %], templates which write the syntax
of input files for the old [% feffit %] program.
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="demeter" %], templates which write out perl
syntax using [% demeter %].
[% END %]
[% END %]

[% FILTER html_para %]
The [% INCLUDE font/mono a="demeter" %] category might seem a bit
strange.  Its purpose is, indeed, to allow [% demeter %] programs to
write [% demeter %] programs.  The intent is to allow a GUI to export
a file containing a [% demeter %] program that can be used to make a
fit using the same fitting model that was created using the GUI.

The possibility of having these different output targets is the main
reason for using a templating system.  Having command creation
containined in these small template files separate from the code may
seem like an unnecessary layer of abstraction and misdirection, but it
offers [% demeter %] a lot of flexibility and power.  This is even
more evident for the plotting backends.

[% demeter %] currently ships with three different sets in the plotting
category.  More information about plotting backends can be found in
[% INCLUDE html/link text="the user interface chapter" link="../ui.html" %].
[% END %]

[% WRAPPER html/list type="ol" %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="pgplot" %], templates which write the syntax
of [% ifeffit %] plotting commands, which talk directly to PGPLOT.
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="gnuplot" %], templates which write Gnuplot
plotting scripts.  Using Gnuplot involves writing lots of temporary
files which contain the data to be plotted.  It also requires that
Gnuplot be installed on your computer, which is something that you
have to do separate from the installation of [% demeter %].
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="singlefile" %], this set of templates is used
to export the data to be plotted to a single column file.  The main
use of this is in a GUI to exprt a file that can be used to replicate
an interesting plot -- with offsets, energy shifts, and scaling
factors -- in an external plotting program.
[% END %]
[% END %]

[% FILTER html_para %]
In the future, I would like to add more plotting backends to
[% demeter %].  Certainly, any of the plot creation tools from CPAN
(such as 
[% INCLUDE html/link text="GD" link="http://search.cpan.org/~lds/GD/" %]
or
[% INCLUDE html/link text="Chart" link="http://search.cpan.org/~chartgrp/Chart/" %])
would be possible, as would something like
[% INCLUDE html/link text="Grace" link="http://plasma-gate.weizmann.ac.il/Grace/" %],
which uses a text file as its input.

[% demeter %] currently ships with two different sets in the [% feff %]
input template category, one for [% feff6 %] and one for [% feff8 %].
(Actually the [% feff8 %] set has not yet been written at the time
this document is being written.  In fact, [% demeter %]'s[%#'%] [% feff8 %]
interface has not yet been started.

There is only one set in the [% atoms %] input template category.  It
seems unlikely that other sets will actually be required.
[% END %]

[% PROCESS subsection label="Template groups" %]

[% FILTER html_para %]
Template groups define related chores.  These chores are
[% END %]

[% WRAPPER html/list type="ol" %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="process" %]: all data processing chores that
do not involve fitting [% chik %] data or doing any other sort of data
analysis. 
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="fit" %]: all chores associated with fitting
[% chik %] data.
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="analysis" %]: all analysis chores other than
those associated with fitting [% chik %] data.  This might include
things like linear combination fitting. principle component analysis,
or log-ration/phase-difference analysis.
[% END %]
[% WRAPPER html/li %]
[% INCLUDE font/umono a="plot" %]: all chore associated with plotting data
[% END %]
[% END %]

[% FILTER html_para %]
The first four groups must be provided completely by any template set.
Although if a template is missing from a template set, [% demeter %]
will fall back to using the template for that chore found in the 
[% INCLUDE font/mono a="ifeffit" %] set.
[% END %]

[% PROCESS subsection label="The template method" %]

[% FILTER html_para %]
When the [% INCLUDE font/mono a="template" %] method is called, a
number of variables are set for use in the template.  These variables
are set appropriately for the contect in which the 
[% INCLUDE font/mono a="template" %] method is called.  You can see
one example of this in the example at the beginning of this section.
The [% INCLUDE font/mono a='$D' %] variable represents the Data object
relevant to the context in which that template is evaluated.  Some
more examples will be seen below.

Here is the complete list of these special variables.
[% END %]

[% WRAPPER html/list type="dl" %]
[% WRAPPER html/dt dt='$S' %] 
This is the [% INCLUDE font/quote a="self" %] object, i.e. the object
that called the [% INCLUDE font/mono a="template" %] method.
[% END %]
[% WRAPPER html/dt dt='$D' %] 
The is the Data object of the calling object.  When a Data object is
the caller, [% INCLUDE font/mono a='$S' %] and [% INCLUDE font/mono a='$D' %]
are the same thing.  For a Path object as [% INCLUDE font/mono a='$S' %],
[% INCLUDE font/mono a='$D' %] is its associated Data object.
[% END %]
[% WRAPPER html/dt dt='$P' %] 
This is the Plot object.
[% END %]
[% WRAPPER html/dt dt='$C' %] 
This is the Config object.
[% END %]
[% WRAPPER html/dt dt='$F' %] 
This is the currently active Fit object.
[% END %]
[% WRAPPER html/dt dt='$DS' %] 
This is the currently active Data standard.
[% END %]
[% WRAPPER html/dt dt='$T' %] 
This is the currently active Feff (i.e. theory) object.
[% END %]
[% WRAPPER html/dt dt='$PT' %] 
This is the currently active Path object.
[% END %]
[% END %]

[% FILTER html_para %]
The syntax of the [% INCLUDE font/mono a="template" %] method is
relatively simple.  The method takes two arguments, the first
identifying the template group, the second identifying the chore
that the template performs.  Identifying the specific template also
requires the template set, which is an attribute of the 
[% INCLUDE html/link text="Mode group" link="mode.html" %].
[% END %]

[% WRAPPER codeexample -%]
my $string = $self->template("process", "fft");
$self->dispose($string);
[% END %]

[% FILTER html_para %]
In this example, the command to make a forward Fourier transform using
the current template set is generated by evaluating the appropriate
template.  The text of this command is then passed to the 
[% INCLUDE font/mono a="dispose" %] method.

Some templates require data that is not normally available from any
attribute of any object.  There are two ways of addressing that
situation.  One is to store an arbitrarily named attribute in the
Config object.  This is done like so:
[% END %]

[% WRAPPER codeexample -%]
$config->set(conv_type  => $args{type},
             conv_width => $args{width},
             conv_which => $args{which},
            );
my $string = $self->template("process", "convolve");
$self->dispose($string);
[% END %]

[% FILTER html_para %]
Here three scalars related to data covolution are set in the Config
object.  Here is how those scalars are used:
[% END %]

[% WRAPPER html/pre %]
{
  $x = ($C->get("conv_which") eq 'xmu') ? 'energy' : 'k';
  $type = 'gconvolve';
  ($type = 'lconvolve') if (lc($C->get("conv_type")) =~ m{\Al});
  q{}
}
##|
##| convolution {$D->group}
set {$D->group}.{$C->get("conv_which")} = {$type}({$D->group}.{$x}, {$D->group}.{$C->get("conv_which")}, {$C->get("conv_width")})
##|
[% END %]

[% FILTER html_para %]
Note that this example uses the [% INCLUDE font/mono a='$C' %] special
template variable to access the Config object and the Config object's[%#'%]
[% INCLUDE font/mono a="get" %] method to oibjtain the values of these
arbitrarily named scalars.

The other approach to passing arbitrary data to a template is to
provide a hash reference as the third argument of the 
[% INCLUDE font/mono a="template" %] method.
[% END %]

[% WRAPPER codeexample -%]
$command = $self->template("plot", "marker", { x => $xx, 'y'=> $y });
[% END %]

[% FILTER html_para %]
These user-defined parameters are then accessed by name in the
template.  This example also shows the use of the 
[% INCLUDE font/mono a='$P' %] special variable to make reference to
the Plot object.
[% END %]

[% WRAPPER html/pre %]
plot_marker({$x}, {$y}, marker={$P->markertype}, color={$P->markercolor})
[% END %]

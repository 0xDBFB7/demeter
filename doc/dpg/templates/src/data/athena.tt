[% META title = 'Importing from Athena project files' %]

[% FILTER html_para %]
The most convenient method for importing data into a [% demeter %]
program is to import directly from an [% athena %] project file.
Presumably, you have already used [% athena %] to process you [% mu %]
data into an analysis-ready form.  When data are imported from a
project file, all the attributes of the Data object will be set using
the values found in the project file.
[% END %]

[% PROCESS section label="Creating Data objects" %]


[% FILTER html_para %]
Importing data from an [% athena %] project file is a two-step
process.  First a Data::Prj object must be created to store
information obtained from a lexical analysis of the project file.
Methods of the Data::Prj object are then used to generate Data
objects.  Here is a simple example of extracting the first record from
a project file and creating a Data object from that record.
[% END %]


[% WRAPPER codeexample -%]
#!/usr/bin/perl
use Demeter;

my $prj = Demeter::Data::Prj -> new(file=>'iron_data.prj');
my $data = $prj -> record(1);
$data -> plot('E');
[% END %]

[% FILTER html_para %]
You can import several records at a time by specifying a list of
record identifiers:
[% END %]

[% WRAPPER codeexample -%]
#!/usr/bin/perl
use Demeter;

my $prj = Demeter::Data::Prj -> new(file=>'iron_data.prj');
my @several = $prj -> records(2, 7, 12, 19);
$_ -> plot('E') foreach @several;
[% END %]

[% FILTER html_para %]
Note that [% INCLUDE font/mono a='records' %] is just an alias for
[% INCLUDE font/mono a='record' %].  They point at the same method.
The two spellings are offered as a nod to English grammer.  The method
will recognize if it is called in scalar or list context and properly
return a single Data object or an array of Data objects.

You can import all records easily using the 
[% INCLUDE font/mono a='slurp' %] method.
[% END %]

[% WRAPPER codeexample -%]
#!/usr/bin/perl
use Demeter;

my $prj = Demeter::Data::Prj -> new(file=>'iron_data.prj');
my @all = $prj -> slurp;
$_ -> plot('E') foreach @all;
[% END %]

[% PROCESS section label="Obtaining other information from project files" %]

[% FILTER html_para %]
You can query an [% athena %] project file for its content in several
ways.  To obtain a listing of contents of the project file, use the
[% INCLUDE font/mono a='list' %] method.
[% END %]

[% WRAPPER codeexample -%]
print $prj -> list;
   ##==prints==>
   # #     record
   # # -------------------------------------------
   #   1 : Iron foil
   #   2 : Iron oxide
   #   3 : Iron sulfide
[% END %]

[% FILTER html_para %]
To create a simple table of parameter values, supply a list of
attribute names to the [% INCLUDE font/mono a='list' %] method.
[% END %]

[% WRAPPER codeexample -%]
print $prj -> list(qw(bkg_rbkg fft_kmin));
  ## ==prints==>
  #  #     record         bkg_rbkg   fft_kmin
  #  # -------------------------------------------
  #    1 : Iron foil      1.6        2.0
  #    2 : Iron oxide     1.0        2.0
  #    3 : Iron sulfide   1.0        3.0
[% END %]

[% FILTER html_para %]
The [% INCLUDE font/mono a='list' %] method is used extensively by the 
[% INCLUDE font/mono a='lsprj' %] program, which is distributed
with [% demeter %].

The [% INCLUDE font/mono a='allnames' %] method will return an array
of record labels (the strings in the groups list in [% athena %]).
For complete details on these methods, see the
[% INCLUDE font/module a="Demeter::Data::Prj" %] documentation.
[% END %]
